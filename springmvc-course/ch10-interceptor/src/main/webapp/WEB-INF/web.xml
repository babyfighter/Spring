<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    声明，注册springmvc核心对象DispatcherServlet
        需要在tomcat服务器启动后，创建DispatcherServlet对象的实例
        因为DispatcherServlet在创建的过程中，会同时创建springmvc容器对象
        读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时就可以直接适用对象

        servlet的初始化会执行initial（）方法
        init(){
            //创建容器，读取配置文件
            webApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml")
            //把容器对象放到ServletContext中
            getServletContext().setAttribute(key,ctx);
        }
        是springmvc创建容器对象时，读取的配置文件默认是/WEB-INFO/<servlet-name>-servlet.xml
                                                    (/WEB-INFO/myweb-servlet.xml)
-->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--        字定义springmvc读取的配置文件的位置-->
        <init-param>
<!--            springmvc的配置文件的位置的属性-->
            <param-name>contextConfigLocation</param-name>
<!--            指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
<!--        在tomcat启动后，创建servlet对象
            load-on-startup:tomcat启动后创建对象的顺序。值是>=0整数。数值越小，创建对象的时间越早
-->
        <load-on-startup>1</load-on-startup>
<!--        使用框架的时候，url-pattern可以使用两种值
            1.使用扩展名方式，语法*.xxxx,xxxx是自定义的扩展名
            2.使用斜杆“/”，
-->
    </servlet>
        <servlet-mapping>
            <servlet-name>myweb</servlet-name>
            <url-pattern>*.do</url-pattern>
        </servlet-mapping>
<!--    声明过滤器，解决post请求乱码-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<!--        设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
<!--        强制请求对象使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
<!--        强制应答对象使用encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
<!--        /*：表示强制所有的请求先通过过滤器处理-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>